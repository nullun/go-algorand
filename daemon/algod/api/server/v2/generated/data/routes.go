// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//9PPp2OQCgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
