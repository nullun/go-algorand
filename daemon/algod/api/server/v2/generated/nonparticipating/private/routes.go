// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
