// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", ctx.QueryParams(), &params.Prefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefix: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
