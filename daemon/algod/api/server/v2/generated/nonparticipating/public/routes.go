// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
