// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//yhGxQ84eAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
