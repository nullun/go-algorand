// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
